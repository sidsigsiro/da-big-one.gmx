<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create the path
if !instance_exists(obj_enemy_hivemind) {
    instance_create(0, 0, obj_enemy_hivemind)
}

//FOR TESTING PURPOSES
cansee = true

//create light
//set player_in_sight
player_in_sight = false
if instance_exists(obj_glare_controller) {
    my_light = glr_light_create(spr_glr_light_mask_4, 0, x, y, c_white, 1);
}
//create rifle
prevstate = scr_enemy_patrol
next_state = noone
has_energy = true
my_rifle = instance_create(x, y + 5, obj_enemy_rifle)
my_rifle.owner = self
//level 2 sus cautar number
cautars_searched = 0
my_distract = noone //object guard is distracted by
wait_time = room_speed*4 //frames waited at patrol points
playerseen = 0
look_ahead = false
arrowtimer = 0
temp = 0
wet = false
item_dropped = false
//focus
my_focus = instance_create(x, y, obj_enemy_focus)
my_focus.owner = self
move_next_view = 0
view_focus = noone
search_complete = false
stam = 100
numboflines = 0
chatting = false
sustoken = 1
curgrid = global.grid_floor1
investar = obj_node_distraction
basespd = 0.5
spd = 0
sus = 0
dead = false
attacking = false
image_speed = 0
image_index = 0
hp = 2
lookat = direction
noiseheard = noone
enstate = scr_enemy_patrol
height = 0
floorval = 0
path = path_add();
//view cone coordinates
view_x1 = 170
view_x2 = 170
view_y1 = 170
view_y2 = 170
//squad stuff (only for investigate state, roles are assigned when investigate starts)
squad_number = 0
in_squad = false

//class stuff
class = noone

//convo roles
        global.convo_a_chatter_a = noone
        global.convo_a_chatter_b = noone
        global.convo_a_chatter_c = noone

wait = false
squad = ALPHA
search = ALPHA

//patrol nodes
tar_num = 1

for(var i = 1; i &lt;= 20; i++) {
    tars[i] = noone
}

//alert nodes
cautar = noone
cautar0 = noone
caunexttar = noone
cautar = noone
cautar0_default = noone
caunexttar_default = noone
focus_nexttar = tars[tar_num]
//class bonus
classspd = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy
with(my_rifle) {
    instance_destroy();
}
with(my_focus) {
    instance_destroy();
}

glr_light_destroy(my_light)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm for scr_enemy_look enstate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///convo alarm/reset path
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm until you can get sus'd again
sustoken = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm til unfreeze/ alarm for being wet
if enstate != scr_enemy_frozen {
    wet = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///decrease sus (suspicion)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm for searching/alarm for looking at view nodes
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm for wait state/switch from attack to chase/switch from investigate to wait
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_get_input
scr_get_input();

//add sus for noise
if place_meeting(x, y, obj_noise_all) {
    if enstate != scr_enemy_sniper_chase or enstate != scr_enemy_frozen {
        sus += 1
    }
}

if look_ahead = true {
    my_focus.look_ahead = true
} else if look_ahead = false {
    my_focus.look_ahead = false
}

// hear noise code in obj_noise_large_Create

//set focus state
if enstate = scr_enemy_search_phase2 or enstate = scr_enemy_search_phase2_wait {
    if wait = false {
        my_focus.move = true
    }
}

if enstate = scr_enemy_patrol or enstate = scr_enemy_wait {
    if wait = false {
            my_focus.survey = false
            //get direction
            if look_ahead = false {
                focus_dir = point_direction(my_focus.x, my_focus.y, tars[tar_num].x, tars[tar_num].y);
            } else if look_ahead = true {
                focus_dir = point_direction(my_focus.x, my_focus.y, x + lengthdir_x(64, direction), y + lengthdir_y(64, direction))
            }
            // Get the length
            if enstate = scr_enemy_patrol {
                if point_distance(x, y, my_focus.x, my_focus.y) &lt; 60 {
                    focus_len = point_distance(x, y, tars[tar_num].x, tars[tar_num].y)/120;
                } else {
                if point_distance(my_focus.x, my_focus.y, tars[tar_num].x, tars[tar_num].y) &gt; 24 {
                    focus_len = point_distance(x, y, tars[tar_num].x, tars[tar_num].y)/30;
                } else {
                    if look_ahead = false {
                        focus_len = 0
                    } else {
                        focus_len = 7
                    }
                }
            }
        } else {
            focus_len = 1
        }
            //Get the hspd and vspd
            focus_hspd = lengthdir_x(focus_len, focus_dir);
            focus_vspd = lengthdir_y(focus_len, focus_dir);
            // Move
            if !place_meeting(x, y, tars[tar_num]) {
                if point_distance(my_focus.x, my_focus.y, tars[tar_num].x, tars[tar_num].y) &gt; 3 {
                    my_focus.x += focus_hspd;
                    my_focus.y += focus_vspd;
                }
            } else {
                my_focus.x += focus_hspd;
                my_focus.y += focus_vspd;
            }
        
    }
    if wait = true {
        if place_meeting(x, y, tars[tar_num]) {
            my_focus.survey = true
            if (my_focus.state != scr_view_patrol) and (my_focus.state != scr_view_wait) {
                my_focus.state = scr_view_patrol
            }
        } else {
            my_focus.survey = false
            //get direction
            focus_dir = point_direction(my_focus.x, my_focus.y, tars[tar_num].x, tars[tar_num].y);
            // Get the length
            if point_distance(x, y, my_focus.x, my_focus.y) &lt; 60 {
            focus_len = point_distance(x, y, tars[tar_num].x, tars[tar_num].y)/100;
        } else {
            focus_len = point_distance(x, y, tars[tar_num].x, tars[tar_num].y)/30;
        }
                
            //Get the hspd and vspd
            focus_hspd = lengthdir_x(focus_len, focus_dir);
            focus_vspd = lengthdir_y(focus_len, focus_dir);
            // Move
            if point_distance(my_focus.x, my_focus.y, tars[tar_num].x, tars[tar_num].y) &gt; 3 {
                my_focus.x += focus_hspd;
                my_focus.y += focus_vspd;
            }
        }
    }
} else if enstate = scr_enemy_sniper_chase {
    my_focus.survey = true;
    my_focus.state = scr_view_chase;
} else if enstate = scr_enemy_search_phase1 {
    my_focus.survey = true
    my_focus.state = scr_view_search_phase1
} else if (enstate = scr_enemy_search_phase2 or enstate = scr_enemy_search_phase2_wait) or (enstate = scr_enemy_search_sus2 or enstate = scr_enemy_search_sus2_wait) {
    if my_focus.move = true {
        my_focus.survey = false
        //get direction
        focus_dir = point_direction(my_focus.x, my_focus.y, caunexttar.x, caunexttar.y);
        // Get the length
        if point_distance(x, y, my_focus.x, my_focus.y) &lt; 60 {
            focus_len = point_distance(x, y, caunexttar.x, caunexttar.y)/100;
        } else {
            focus_len = point_distance(x, y, caunexttar.x, caunexttar.y)/30;
        }
        //Get the hspd and vspd
        focus_hspd = lengthdir_x(focus_len, focus_dir);
        focus_vspd = lengthdir_y(focus_len, focus_dir);
        // Move
        if point_distance(my_focus.x, my_focus.y, caunexttar.x, caunexttar.y) &gt; 3 {
            my_focus.x += focus_hspd;
            my_focus.y += focus_vspd;
        }
    }
} else if enstate = scr_enemy_investigate {
    my_focus.investar = investar
} else if enstate = scr_enemy_frozen {
    my_focus.survey = false
    my_focus.state = noone
}


///set face
if (enstate = scr_enemy_patrol) or (enstate = scr_enemy_wait) {
    dir = point_direction(x, y, my_focus.x, my_focus.y)
} else if (enstate = scr_enemy_sniper_chase) or (enstate = scr_enemy_investigate){
    dir = point_direction(x, y, my_focus.x, my_focus.y)
} else if enstate = scr_enemy_search_phase1 {
    dir = point_direction(x, y, my_focus.x, my_focus.y)
} else if (enstate = scr_enemy_search_phase2 or enstate = scr_enemy_search_phase2_wait) or (enstate = scr_enemy_search_sus2 or enstate = scr_enemy_search_sus2_wait) {
    dir = point_direction(x, y, my_focus.x, my_focus.y)
} else if enstate = scr_enemy_investigate {
    dir = point_direction(x, y, my_focus.x, my_focus.y)
} else if enstate = scr_enemy_chat {
    if id = global.convo_a_chatter_a {
        dir = point_direction(x, y, global.convo_a_chatter_b.x, global.convo_a_chatter_b.y)
    } else if id = global.convo_a_chatter_b {
        dir = point_direction(x, y, global.convo_a_chatter_a.x, global.convo_a_chatter_a.y)
    } else if id = global.convo_a_chatter_c {
        dir = point_direction(x, y, global.convo_a_chatter_a.x, global.convo_a_chatter_a.y)
    }
}

//set light position
if instance_exists(obj_glare_controller) {
glr_light_set_position(my_light, x, y);

glr_light_set_rotation(my_light, dir)
}

scr_get_face();

//check for floor
if place_meeting(x, y, obj_floor_2) {
    height = 32
} else if !place_meeting(x, y, obj_floor_2) {
    height = 0
}

switch(face) {
    case RIGHT:
        sprite_index = spr_player_right
        break;
    
    case LEFT:
        sprite_index = spr_player_left
        break;
        
    case DOWN:
        sprite_index = spr_player_down
        break;
        
    case UP:
        sprite_index = spr_player_up
        break;
}

//set numboflines to zero if not chatting
if enstate != scr_enemy_chat {
    numboflines = 0
}

//get ded
if hp = 0 {
    instance_destroy();
    dead = true
}
if dead = true {
    
    enstate = scr_enemy_dead
    if squad = ALPHA {
        if search = ALPHA {
            obj_enemy_hivemind.aaalive = false
        }
        if search = BETA {
            obj_enemy_hivemind.abalive = false
        }
        if search = CHARLIE {
            obj_enemy_hivemind.acalive = false
        }
        if search = DELTA {
            obj_enemy_hivemind.adalive = false
        }
    }
}
//hit by arrow
var arrow_hit = instance_place(x, y, obj_arrow)
if instance_place(x, y, obj_arrow) {
    hp -= 2
    if enstate != scr_enemy_sniper_chase {
        enstate = scr_enemy_sniper_chase
    }
    with(arrow_hit) {
        destroyed = true
        alarm[0] = 1
    }
    if hp &gt; 0 {
        obj_enemy_hivemind.alarm[0] = room_speed
    }
}

//hit by explosion
if place_meeting(x, y, obj_explosion) {
    hp -= 2
}

//return to patrol
if enstate != scr_enemy_dead {
    if alarm[1] = 0 {
        enstate = scr_enemy_patrol
    }
}

///view cone
var x1 = x + lengthdir_x(view_x1, dir - 30);
var y1 = y + lengthdir_y(view_x2, dir - 30);
var x2 = x + lengthdir_x(view_y1, dir + 30);
var y2 = y + lengthdir_y(view_y2, dir + 30);
var x1b = x + lengthdir_x(view_x1 + 90, dir - 33);
var y1b = y + lengthdir_y(view_x2 + 90, dir - 33);
var x2b = x + lengthdir_x(view_y1 + 90, dir + 33);
var y2b = y + lengthdir_y(view_y2 + 90, dir + 33);
var x1c = x + lengthdir_x(view_x1 + 150, dir - 37);
var y1c = y + lengthdir_y(view_x2 + 150, dir - 37);
var x2c = x + lengthdir_x(view_y1 + 150, dir + 37);
var y2c = y + lengthdir_y(view_y2 + 150, dir + 37);

//sight
if enstate != scr_enemy_dead {
    if enstate != scr_enemy_frozen {
        if cansee = true {
        if point_in_triangle(obj_player.x, obj_player.y, x, y, x1c, y1c, x2c, y2c) {
            // if player height is less than 24 pixels above enemy height
            if obj_player.height&lt;height + 24 {
                if !collision_line(x, y, obj_player.x, obj_player.y, obj_viewblock, false, false) {
                    if !collision_line(x, y, obj_player.x, obj_player.y, obj_door, false, false) {
                        if (obj_player.crouch = false or !collision_line(x, y, obj_player.x, obj_player.y, obj_viewblock_crouch, true, true)) {
                            player_in_sight = true
                            playerseen += 1
                            if point_in_triangle(obj_player.x, obj_player.y, x, y, x1b, y1b, x2b, y2b) {
                                playerseen += 1
                                if point_in_triangle(obj_player.x, obj_player.y, x, y, x1, y1, x2, y2) {
                                    if !collision_line(x, y, obj_player.x, obj_player.y, obj_grass, true, true) {
                                        playerseen = 120
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            player_in_sight = false
        }
    }
}
}

//playerseen and player_in_sight

if playerseen &gt; 120 {
    playerseen = 120
}
if playerseen &lt; 0 {
    playerseen = 0
}

if player_in_sight = false {
    if playerseen &gt; 0 {
        playerseen -= 0.2
    }
}

if playerseen = 120 {
    obj_enemy_hivemind.alarm[0] = room_speed*2
    obj_enemy_hivemind.alarm[1] = -1
    with(obj_enemy) {
        if enstate != scr_enemy_frozen {
            enstate = scr_enemy_sniper_chase
        }
    }
    with(obj_enemy_sniper) {
        if dead = false {
            enstate = scr_enemy_sniper_chase
        }
    }
}

///hit by flare(smoke bomb)
if place_meeting(x, y, obj_steam) {
    smokespd = (-0.7)
} else {
    smokespd = 0
}

//frozen and water
scr_get_wet();

if temp = -1 {
    enstate = scr_enemy_frozen
}

if temp = 1 {
    instance_create(x, y, obj_caunode1)
    instance_create(x, y, obj_noise_large)
    investar_x = x
    investar_y = y
    enstate = scr_enemy_investigate
    sus = true
    if !collision_line(x, y, obj_player.x, obj_player.y, obj_viewblock, true, true) {
       if collision_line(my_rifle.x, my_rifle.y, x + lengthdir_x(600, my_rifle.image_angle), y + lengthdir_y(600, my_rifle.image_angle), obj_player, false, true) {
            with(obj_player) {
                room_restart();
            }
        }
    }
    temp = 0
}

//stop checking if enemy is dead
script_execute(enstate)

if height &gt;= 24 {
    floorval = (-200)
} else {
    floorval = 0
}
depth = -y + floorval

///slowed down by water
if place_meeting(x, y, obj_water) {
    if !place_meeting(x, y, obj_ice) {
        waterspd = (-0.2)
    } else waterspd = (0)
} else waterspd = (0)

//killed by evil water
if place_meeting(x, y, obj_evil_water) {
    if alarm[8] = -1 {
        alarm[8] = 5
    }
    if alarm[8] = 0 {
        instance_destroy();
    }
}

//classspd
if class = PISTOL {
    classspd = 0.3
} else if class = RIFLE {
    classspd = 0
}

//calculate total speed
spd = (basespd) + (classspd) + (smokespd) + (waterspd)

//limit speed
if spd &lt; 0 {
    spd = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

///view cone
var x1 = x + lengthdir_x(view_x1, dir - 30);
var y1 = y + lengthdir_y(view_x2, dir - 30);
var x2 = x + lengthdir_x(view_y1, dir + 30);
var y2 = y + lengthdir_y(view_y2, dir + 30);
var x1b = x + lengthdir_x(view_x1 + 90, dir - 33);
var y1b = y + lengthdir_y(view_x2 + 90, dir - 33);
var x2b = x + lengthdir_x(view_y1 + 90, dir + 33);
var y2b = y + lengthdir_y(view_y2 + 90, dir + 33);
var x1c = x + lengthdir_x(view_x1 + 150, dir - 37);
var y1c = y + lengthdir_y(view_x2 + 150, dir - 37);
var x2c = x + lengthdir_x(view_y1 + 150, dir + 37);
var y2c = y + lengthdir_y(view_y2 + 150, dir + 37);
if enstate != scr_enemy_dead {
    if debug_mode = true {
        draw_triangle_colour(x, y, x1, y1, x2, y2, c_red, c_red, c_red, true)
        draw_triangle_colour(x, y, x1b, y1b, x2b, y2b, c_yellow, c_yellow, c_yellow, true)
        draw_triangle_colour(x, y, x1c, y1c, x2c, y2c, c_blue, c_blue, c_blue, true)
    }
}


//pickpocket circle
if enstate != scr_enemy_dead {
    draw_circle_colour(x, y, 10, c_green, c_green, true)
}
draw_text(x - 16, y, string(sus))

if enstate = scr_enemy_frozen or enstate = scr_enemy_stun {
    image_blend = c_aqua
    } else if wet = true {
        image_blend = c_blue
    } else image_blend = c_red

if has_energy = false {
    image_blend = c_orange
}    

//draw social circle
draw_circle(x, y, 30, true)

//draw_text(x - 32, y, string(alarm[8]))

draw_text(x, y - 32, string(alarm[10]))

//draw_text(x + 48, y, string(alarm[0]))

//draw_text(x, y - 32, string(temp))
draw_text(x + 32, y - 32, string(sus))
draw_text(x + 32, y - 45, script_get_name(enstate))

draw_line(my_rifle.x, my_rifle.y, x + lengthdir_x(600, my_rifle.image_angle), y + lengthdir_y(600, my_rifle.image_angle))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
