<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create player
///NOTE: USE RANDOMIZE(); OTHER WISE ALL RANDOM NUMBERS WILL BE THE SAME EVERYTIME YOU LOAD THE GAME

numb_of_mines = 0
det_timer = 0
barreltar = noone
dblock_charge = 0
temp = NEUTRAL
investar = obj_node_distraction
phy_fixed_rotation = true
on_ice = false
sliding = false
coins = 0
stam = 200
arrowtimer = 0
dashtimer = 0
moving = false
onpowder = false
crouch = false
floorval = 0
height = 0
depth = -y
hp = 999;
basespd = 2;
spd = 2;
hspd = 0;
vspd = 0;
xaxis = 0;
yaxis = 0;
xaxisprev = 0;
yaxisprev = 0;
len = 0;
dir = 0;
attacked = false;
image_speed = 1
state = scr_move_state;
able_to_fall = true

velocity = 0 //falling velocity

ymax = 50

/// Set fixed rotation

face = RIGHT
moving = false
instance_create(x, y, obj_cursor)
jumptarget = 0

// used in draw
player_surf = noone
mask_surf = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start recharging stamina
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///alarm for arrow charge time

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///footsteps sounds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dash alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NOT SURE WHAT THIS DOES YOU SHOULD FIND OUT SO YOU CAN DELETE IT SO IT STOPS TAKING UP MEMEORY HOPEFULLY YOU DO THAT AND DON'T JUST LEAVE THIS IN AND HAVE IT BE FOUND BY DATA MINERS THAT WOULD BE EMBARRISING BUT AT LEAST YOU FINISHED THE GAME SO YEAH GOOD JOB
///arrow alarm for now


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move the player in the step event
scr_get_input();

//create view if there isn't one
if !instance_exists(obj_view) {
    instance_create(x, y, obj_view)
}

//dash timer
if dashtimer &lt; 0 {
    dashtimer = 0
}

if dashtimer &gt; 0 {
    dashtimer -= 1
}

if !instance_exists(obj_cursor) {
    instance_create(mouse_x, mouse_y, obj_cursor)
}

if hp &lt;= 0 {
    room_restart()
}

//check if on ice
if place_meeting(x, y, obj_ice) {
    on_ice = true
} else {
    on_ice = false
}

///slowed down by water
if place_meeting(x, y, obj_water) {
    if !place_meeting(x, y, obj_ice) {
        if crouch = true {
            waterspd = (-0.3)
        } if crouch = false{
            waterspd = (-1)
        }
    } else waterspd = 0
} else waterspd = 0

if place_meeting(x, y, obj_evil_water) {
    if !place_meeting(x, y, obj_ice) {
        room_restart();
    }
}

///hit by arrow
var enemy_arrow = place_meeting(x, y, obj_arrow_enemy)
if enemy_arrow {
    hp -= 1
}

//hit by grass fire
var grasstar = instance_place(x, y, obj_grass)
if grasstar {
    if grasstar.image_index = 1 {
        hp -= 1
    }
}

//use perception
if !instance_exists(obj_text) {
    if keyboard_check_pressed(ord('P')) {
        scr_text("The room's air is just as stuffy # as it's colour palette.", 1, obj_view.x, obj_view.y + 8)
    }
} else if instance_exists(obj_text) {
    if keyboard_check_pressed(ord('P')) {
        with (obj_text) {
            instance_destroy()
        }
    }
}
//check if moving
if xaxis = 0 and yaxis = 0 {
    moving = false
} else if (xaxis != 0) or (yaxis != 0) {
    moving = true
}

//make footstep sounds
if crouch = false and moving = true and alarm[2] = -1 {
    alarm[2] = room_speed/6
    if alarm[2] = room_speed/6 {
        instance_create(x, y, obj_noise_foot_step)
    }
}

//restart room
if keyboard_check(ord('T')) {
    room_restart();
}
//fall
///scr_item_fall

// TODO: Move this code into obj_side_stairs
// climb stairs (or collide)

var stairs = instance_place(x, y, obj_side_stairs);
if stairs != noone {
    // stairs width is 160
    // therefore (x - stairs.x) is between -80 and 80
    
    var step_height = (x - stairs.x)/stairs.sprite_width + 0.5; //number between 0 and 1
    step_height *= 32 //number between 0 and 32
    
    // difference between current height and step height
    var height_diff = step_height - height
    
    
    if height_diff &lt;= 6 {
        //snap to step_height
        y += height_diff
        height = (step_height)
        /*
        with(obj_climb_floor1) {
            phy_active = false
        }
        */
    }
    
    if height &gt;= 6 {
        obj_side_stairs.phy_active = false
    } else {
        obj_side_stairs.phy_active = true
    }
    
    if height &lt; 0 {
        height = 0
    }
    
} else if stairs == noone or height_diff &gt; 6 {
    if velocity = 0 {
        with(obj_climb_floor1) {
            phy_active = true
        }
    }
}


// falling code
if !place_meeting(x, y, obj_floor_2) and !place_meeting(x, y, obj_floor2_dblock) and stairs = noone {
    if (height &gt; 0) {
        velocity += 0.25 //acceleration
        phy_position_y += velocity
        height -= velocity
        if height &lt; 0 {
            // snap to ground
            phy_position_y += height
            height = 0
            velocity = 0
            if instance_exists(obj_side_stairs) {
                obj_side_stairs.phy_active = true
            }
        }
    }
}

if height &lt; 24 {
    obj_floor_2.phy_active = true
    obj_climb_floor2.phy_active = true
}

//set height
if velocity = 0 and stairs = noone {
    scr_set_floor();
}

//set_depth
if stairs = noone and height = 0 {
    scr_set_depth();
} else if stairs != noone and height &gt; 0 {
    depth = stairs.depth - 1
}

script_execute(state)

//Check for death
if (obj_player_stats.hp &lt;= 0) {
    instance_destroy();
}

//control basespd
if basespd &lt; 0 {
    basespd = 0
}

//crouch speed
if crouch = true {
    crouchspd = (-1)
} else { 
    crouchspd = 0
}

spd = 1.5 + (waterspd) + (crouchspd)

//stam stuff
if stam &gt; 200 {
    stam = 200
}
if stam &lt; 0 {
    stam = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block_side">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collide with object
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collide with door
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ---------- BEGIN INTENSE DRAWING ----------

if !surface_exists(mask_surf) {
    mask_surf = surface_create(sprite_width, sprite_height)
} 
if !surface_exists(player_surf) {
    player_surf = surface_create(sprite_width, sprite_height)
}

// all drawing will occur on mask_surf until surface_reset_target()
surface_set_target(mask_surf)

//fill with transparent
draw_clear_alpha(c_white, 0)

//calculate mask y based on distacne from grass
var mask_y = -16;
var grass = instance_place(x, y, obj_grass_bottom)
if grass != noone {
    mask_y = max((y - grass.y)*2 + 24, -16)
}

// draw mask, snap x to nearest 32, set y to approximately player's waist
draw_sprite(spr_grass_mid_alpha_mask, 0, 48 - x mod 32, sprite_height + mask_y)

// this blend mode gets the intersection of opaque pixels
draw_set_blend_mode_ext(bm_zero, bm_src_color)

// copy sprite-sized area of global.grass_surface
// (grass has already been drawn all-white into global.grass_surface by a shader)
draw_surface_part(global.grass_surface, x - sprite_xoffset, y - sprite_yoffset, sprite_width, sprite_height, 0, 0);


// switch to drawing on player_surf
surface_reset_target()
surface_set_target(player_surf)

//fill with transparent
draw_clear_alpha(c_white, 0)

// draw player
draw_set_blend_mode(bm_normal)
draw_sprite(sprite_index, image_index, sprite_xoffset, sprite_yoffset)

// this blend mode cuts holes out of the dest surface
draw_set_blend_mode_ext(bm_zero, bm_inv_src_alpha)

// apply mask to player
draw_surface(mask_surf, 0, 0);

// draw player to screen
surface_reset_target()
draw_set_blend_mode(bm_normal)
draw_surface(player_surf, x - sprite_xoffset, y - sprite_yoffset)
    
// ---------- END INTENSE DRAWING ----------

if crouch = true {
    image_blend = c_black
} else if crouch = false {
    image_blend = c_white
}

if height &gt;= 24 {
    image_blend = c_aqua
} else {
    image_blend = c_white
}

draw_text(x + 32, y + 64, "FPS = " + string(fps_real));


draw_text(x + 32, y + -32, string(stam))

draw_text(x - 32, y - 16, string(x))
draw_text(x - 32, y - 25, string(y))

draw_text(x + 32, y - 64, "ehigh = " + string(height));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,32</point>
    <point>38,32</point>
    <point>38,60</point>
    <point>24,60</point>
  </PhysicsShapePoints>
</object>
