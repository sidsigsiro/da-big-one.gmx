<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fd_example_button_change_room</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sets a timer used for effects when the player holds the mouse above the button or clicks it.
mouseover_timer = 0;

// Stores the initial image_xscale so we can add a mouseover scaling effect in the step event.
initial_image_xscale = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var delta_time_factor = delta_time / (1000000 / 60);

// Locks the left world button if the currently selected world is the first one, and the right world button if the currently selected world is the last one.
if (image_xscale &gt; 0 &amp;&amp; room_next(room) == -1) {
    locked = true;
} else if (image_xscale &lt; 0 &amp;&amp; room_previous(room) == -1) {
    locked = true;
} else {
    locked = false;
}

// Reduces the opacity of the button if it's locked to indicate that you can't press it.
if (locked) image_alpha = 0.1; else image_alpha = 1;

if (position_meeting(mouse_x, mouse_y, id) &amp;&amp; !locked) {
    // If the user holds the mouse above the button and it's not locked and not within the world region in the window,
    // add to the mouseover timer and proceed to the next world if LMB is pressed.    

    if (mouseover_timer &lt; 1) mouseover_timer += 0.1 * delta_time_factor;
    
    if (mouse_check_button_pressed(mb_left)) {
        mouseover_timer = 0;
        
        if (image_xscale &gt; 0) {
            room_goto_next();
        } else if (image_xscale &lt; 0) {
            room_goto_previous();
        }
    }
} else {
    // Otherwise reduce the mouseover timer.
    if (mouseover_timer &gt; 0) mouseover_timer -= 0.1 * delta_time_factor;
}

// Sets the image_xscale and image_yscale so that it's scaled up if you mouseover it.
// The "(mouseover_timer * mouseover_timer * (3 - 2 * mouseover_timer))" part is a function called smoothstep which
// makes the scaling animation smoother. It's equivalent to "3x^2-2x^3" (with x instead of mouseover_timer).
// You can google smoothstep for more information.
image_xscale = initial_image_xscale * (0.9 + (mouseover_timer * mouseover_timer * (3 - 2 * mouseover_timer)) * 0.1);
image_yscale = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
