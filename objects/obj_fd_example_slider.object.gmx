<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fd_example_slider</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If LMB is pressed and the mouse is over the slider, set pressed to true and lock the
// LMB in obj_fd_example_main so you don't add water to the world while holding LMB down on
// the slider.
mouseover = (point_in_rectangle(mouse_x, mouse_y, bar_x - 4, bar_y - 4, bar_x + bar_width - 1 + 4, bar_y + bar_height - 1 + 4) &amp;&amp; !obj_fd_example_main.dropdown_mouseover);
if (mouse_check_button_pressed(mb_left) &amp;&amp; mouseover) {
    pressed = true;
}

// If the slider is being pressed, update the handle's x coordinate and the value it
// corresponds with in the water physics rectangle of obj_fd_example_main.
if (pressed) {
    handle_x = clamp(window_mouse_get_x(), bar_x, bar_x + bar_width - 1);
    
    var t_x = (handle_x - bar_x) / (bar_width - 1);
    
    switch (slider_id) {
        case 0:
            value = t_x;
            fd_rectangle_set_velocity_maccormack_weight(obj_fd_example_main.fd_rectangle, value);
            break;
        
        case 1:
            value = t_x;
            fd_rectangle_set_material_maccormack_weight(obj_fd_example_main.fd_rectangle, value);
            break;
            
        case 2:
            value = power(t_x * 4, 4);
            fd_rectangle_set_velocity_time_step(obj_fd_example_main.fd_rectangle, value);
            break;
            
        case 3: 
            value = power(t_x * 4, 4);
            fd_rectangle_set_material_time_step(obj_fd_example_main.fd_rectangle, value);
            break;
            
        case 4: 
            if (t_x &lt; 0.5) value = t_x * 0.1; else value = 0.9 + t_x * 0.1;
            fd_rectangle_set_velocity_dissipation_value(obj_fd_example_main.fd_rectangle, value);
            break;
            
        case 5: 
            if (t_x &lt; 0.5) value = t_x * 0.1; else value = 0.9 + t_x * 0.1;
            fd_rectangle_set_material_dissipation_value(obj_fd_example_main.fd_rectangle, value);
            break;
            
        case 6:
            value = t_x;
            fd_rectangle_set_initial_value_pressure(obj_fd_example_main.fd_rectangle, value);
            break;
    }
    
    // Stops if LMB is not being pressed any longer.
    if (!mouse_check_button(mb_left)) {
        pressed = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (slider_id == 4 || slider_id == 5) {
    bar_width = sprite_width;
    bar_height = 6;
    bar_x = x - 50;
    bar_y = y + 14;
} else {
    bar_width = 148;
    bar_height = 6;
    bar_x = x;
    bar_y = y + 14;
}

// Sets the x coordinate of the slider handle.
switch (slider_id) {
    case 0:
        value = fd_rectangle_get_velocity_maccormack_weight(obj_fd_example_main.fd_rectangle);
        handle_x = bar_x + round((value) * (bar_width - 1));
        break;
        
    case 1:
        value = fd_rectangle_get_material_maccormack_weight(obj_fd_example_main.fd_rectangle);
        handle_x = bar_x + round((value) * (bar_width - 1));
        break;
        
    case 2:
        value = fd_rectangle_get_velocity_time_step(obj_fd_example_main.fd_rectangle);
        handle_x = bar_x + round((power(value, 1 / 4) / 4) * (bar_width - 1));
        break;
        
    case 3:
        value = fd_rectangle_get_material_time_step(obj_fd_example_main.fd_rectangle);
        handle_x = bar_x + round((power(value, 1 / 4) / 4) * (bar_width - 1));
        break;
        
    case 4:
        value = fd_rectangle_get_velocity_dissipation_value(obj_fd_example_main.fd_rectangle);
        if (value &lt; 0.5) handle_x = bar_x + round((value / 0.1) * (bar_width - 1)); else handle_x = bar_x + round(((value - 0.9) / 0.1) * (bar_width - 1));
        break;
        
    case 5:
        value = fd_rectangle_get_material_dissipation_value(obj_fd_example_main.fd_rectangle);
        if (value &lt; 0.5) handle_x = bar_x + round((value / 0.1) * (bar_width - 1)); else handle_x = bar_x + round(((value - 0.9) / 0.1) * (bar_width - 1));
        break;
        
    case 6:
        value = fd_rectangle_get_initial_value_pressure(obj_fd_example_main.fd_rectangle);
        handle_x = bar_x + round((value) * (bar_width - 1));
        break;
}

pressed = false;
image_speed = 0;
image_index = slider_id;
mouseover = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draws the sprite.
draw_self();

// Draws the slider handle.
draw_set_color(c_gray);
draw_rectangle(handle_x - 2, bar_y - 2, handle_x + 2, y + sprite_height + 1, false);

// Draws the value.
if (mouseover || pressed) {
    var t = round(string_width(string_format(value, 0, 4)) * 0.5 + 3);
    draw_rectangle(handle_x - t, bar_y - 20, handle_x + t, bar_y - 3, false);
    draw_set_color(c_ltgray);
    draw_text(handle_x, bar_y - 19, string_format(value, 0, 4));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
