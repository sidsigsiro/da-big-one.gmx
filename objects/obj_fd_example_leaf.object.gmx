<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fd_example_leaf</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = random(360);
gravity = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Gets the velocity field of the fluid.
var sf_velocity = fd_rectangle_get_velocity_surface(obj_fd_example_main.fd_rectangle);

if (surface_exists(sf_velocity)) {
    // We have to transform the leaf's position to be relative to the fluid dynamics rectangle, because the fluid dynamics rectangle is drawn scaled.
    var x_relative = round(x / obj_fd_example_main.world_width * fd_rectangle_get_velocity_width(obj_fd_example_main.fd_rectangle));
    var y_relative = round(y / obj_fd_example_main.world_height * fd_rectangle_get_velocity_height(obj_fd_example_main.fd_rectangle));
    
    // Gets the red, green, and blue from the leaf's position in the velocity field, and transforms it from color data into velocities.
    // See the fd_rectangle_get_velocity_surface's documentation for an explanation on the velocity surface format.
    var bgr = surface_getpixel(sf_velocity, x_relative, y_relative);
    var velocity_x = ((bgr &amp; 255) / 255 - 0.5) * 10;
    var velocity_y = (((bgr &gt;&gt; 8) &amp; 255) / 255 - 0.5) * 10;
    
    // Lets the speed approach the speed of the velocity field
    hspeed = lerp(hspeed, velocity_x, 0.5);
    vspeed = lerp(vspeed, velocity_y, 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
