<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_fd_example_normal);
draw_set_halign(fa_center);
texture_set_interpolation(true);
application_surface_enable(false);

// Creates a fluid dynamics rectangle.
fd_rectangle = fd_rectangle_create(256, 256, FD_SHADER_LANGUAGE.GLSL_ES);

mouse_x_previous = mouse_x; mouse_y_previous = mouse_y;
world_width = 720; world_height = 720;
dropdown_open = false;
paused = false;

// These are the sprites you switch between when hitting M.
material_sprite_index = 0;
material_sprite[0] = spr_fd_example_circle_gradient;
material_sprite[1] = spr_fd_example_circle_gradient_small;
material_sprite[2] = spr_fd_example_circle_gradient_large;
material_sprite[3] = spr_fd_example_text;
material_sprites = array_length_1d(material_sprite);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Let's the user end the game, uncap the room speed, pause the game, and change the material input sprite.
if (keyboard_check_pressed(vk_escape)) game_end();
if (keyboard_check(ord("U"))) room_speed = 9999; else room_speed = 60;
if (keyboard_check_pressed(ord("P"))) paused = !paused;
if (keyboard_check_pressed(ord("M"))) material_sprite_index = (material_sprite_index + 1) % material_sprites;

// Updates the fluid dynamics with a simulation step.
if (!paused) fd_rectangle_update(fd_rectangle);

// The mouse position has to be transformed into the space of the fluid dynamics rectangle because it's being scaled.
var temporary, scale, color;
var mouse_x_relative = mouse_x / world_width * fd_rectangle_get_material_width(fd_rectangle);
var mouse_y_relative = mouse_y / world_height * fd_rectangle_get_material_height(fd_rectangle);

// All the different rooms' input methods and controls.
switch (room) {
    case rm_example_pixel_art_fire:
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, c_white, 1);
            fd_rectangle_add_velocity(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1.2, 1.2, (random_range(-1, 1) + (mouse_x - mouse_x_previous)) * 0.35, -random(0.7));
        }
        break;
        
    case rm_example_candle_smoke:
        var emitter_x = 0.507 * fd_rectangle_get_material_width(fd_rectangle), emitter_y = 0.627 * fd_rectangle_get_material_height(fd_rectangle);
        fd_rectangle_replace_material(fd_rectangle, spr_fd_example_circle_gradient, 0, emitter_x, emitter_y, 0.3, 0.3, $555555, 1);
        fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, emitter_x, emitter_y, 1, 1, random_range(-0.35, 0.35), -random(0.7));
        if (mouse_check_button(mb_left)) {
            fd_rectangle_add_velocity(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous), (mouse_y - mouse_y_previous));
        }
        break;
        
    case rm_example_dye:
        if (mouse_check_button_pressed(mb_left)) material_color = choose(c_aqua, c_lime, c_green, c_olive, c_yellow, c_orange, c_red, c_blue, c_white, c_gray);
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, material_color, 1);
            fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous) * 0.35, (mouse_y - mouse_y_previous) * 0.35);
        }
        break;
        
    case rm_example_dye_1:
        if (fd_rectangle_material_surface_was_created(fd_rectangle)) fd_rectangle_replace_material(fd_rectangle, spr_fd_example_initial_material, 0, 0, 0, 1, 1, c_white, 1);
        if (mouse_check_button_pressed(mb_right)) material_color = surface_getpixel(fd_rectangle_get_material_surface(fd_rectangle), mouse_x_relative, mouse_y_relative);
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material_advanced(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, material_color, 1);
            fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous) * 0.35, (mouse_y - mouse_y_previous) * 0.35);
        }
        break;
        
    case rm_example_smoke_trail:
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, $555555, 1);
            fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous) * 0.05, (mouse_y - mouse_y_previous) * 0.05);
        }
        break;
        
    case rm_example_dust_and_objects:
        if (mouse_check_button_pressed(mb_right)) instance_create(mouse_x, mouse_y, obj_fd_example_leaf);
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, c_white, 1);
            fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous) * 0.1, (mouse_y - mouse_y_previous) * 0.1);
        }
        break;
        
    case rm_example_pixel_art_fiery_smoke:
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, c_white, 1);
            fd_rectangle_add_velocity(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1.2, 1.2, (random_range(-1, 1) + (mouse_x - mouse_x_previous)) * 0.35, -random(0.7));
        }
        break;

    case rm_example_thick_smoke:
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, c_white, 1);
            fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous) * 0.35, (mouse_y - mouse_y_previous) * 0.35);
        }
                
    case rm_example_gunfire:
        if (mouse_check_button(mb_left)) {
            fd_rectangle_replace_material(fd_rectangle, material_sprite[material_sprite_index], 0, mouse_x_relative, mouse_y_relative, 1, 1, $555555, 1);
            fd_rectangle_add_velocity(fd_rectangle, spr_fd_example_circle_gradient, 0, mouse_x_relative, mouse_y_relative, 1, 1, (mouse_x - mouse_x_previous) * 0.35, (mouse_y - mouse_y_previous) * 0.35);
        }
        break;
}

mouse_x_previous = mouse_x; mouse_y_previous = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Clears the rectangle so there's no fluid left in it.
fd_rectangle_clear(fd_rectangle);

// Sets various parameters for the fluid behavior depending on what room it is.
switch (room) {

    case rm_example_pixel_art_fire:
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.PIXEL_ART_FIRE);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.A_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.025);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 1);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -1);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.75);
        fd_rectangle_set_acceleration(fd_rectangle, 0, -0.3, 1, -0.2);
        break;
        
    case rm_example_candle_smoke:
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.NO_SHADER);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 1);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.RGBA_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 0.7);
        fd_rectangle_set_material_time_step(fd_rectangle, 0.7);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 0);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.999);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0.001);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 0.5);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -3);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0);
        break;
        
    case rm_example_dye:
        random_set_seed(123);
        material_color = c_aqua;
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.NO_SHADER);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.RGBA_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 1.4);
        fd_rectangle_set_material_time_step(fd_rectangle, 1.4);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 0);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 0.5);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -3);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0);
        break;
        
    case rm_example_dye_1:
        material_color = c_aqua;
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.NO_SHADER);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_big, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.RGBA_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 1.4);
        fd_rectangle_set_material_time_step(fd_rectangle, 1.4);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 0);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 0.5);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -3);
        fd_rectangle_set_pressure_size(fd_rectangle, 720, 720);
        fd_rectangle_set_velocity_size(fd_rectangle, 720, 720);
        fd_rectangle_set_material_size(fd_rectangle, 720, 720);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0);
        break;
        
    case rm_example_smoke_trail:
        material_sprite_index = 1;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.NO_SHADER);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.RGBA_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.005);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 1);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -1);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0);
        break;
        
    case rm_example_dust_and_objects:
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.COLORIZE);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 2);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.A_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.00001);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -1);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0.02, 0, 1);
        break;
        
    case rm_example_pixel_art_fiery_smoke:
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.PIXEL_ART_FIERY_SMOKE);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.A_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_time_step(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.002);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 1);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -1);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.75);
        fd_rectangle_set_acceleration(fd_rectangle, 0, -0.3, 1, -0.2);
        break;
        
    case rm_example_thick_smoke:
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.THICK_SMOKE);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.A_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 2);
        fd_rectangle_set_material_time_step(fd_rectangle, 2);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 0);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.999);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 0);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0.99);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 1);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -1);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0);
        break;
        
    case rm_example_gunfire:
        material_sprite_index = 0;
        material_interpolation_enabled = true;
        show_collision_mask = false;
        fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.COLORIZE);
        fd_rectangle_set_collision_mask_sprite(fd_rectangle, spr_fd_example_fluid_collision_mask_normal, 0);
        fd_rectangle_set_material_type(fd_rectangle, FD_MATERIAL_TYPE.A_16);
        fd_rectangle_set_velocity_time_step(fd_rectangle, 100);
        fd_rectangle_set_material_time_step(fd_rectangle, 100);
        fd_rectangle_set_material_dissipation_type(fd_rectangle, 1);
        fd_rectangle_set_material_dissipation_value(fd_rectangle, 0.005);
        fd_rectangle_set_velocity_dissipation_type(fd_rectangle, 0);
        fd_rectangle_set_velocity_dissipation_value(fd_rectangle, 0.999);
        fd_rectangle_set_velocity_maccormack_weight(fd_rectangle, 1);
        fd_rectangle_set_material_maccormack_weight(fd_rectangle, 0);
        fd_rectangle_set_pressure_iteration_type(fd_rectangle, -1);
        fd_rectangle_set_pressure_size(fd_rectangle, 256, 256);
        fd_rectangle_set_velocity_size(fd_rectangle, 256, 256);
        fd_rectangle_set_material_size(fd_rectangle, 256, 256);
        fd_rectangle_set_initial_value_pressure(fd_rectangle, 0.5);
        fd_rectangle_set_acceleration(fd_rectangle, 0, 0);
        break;
}

// Updates the UI elements to correspond to the new values set in the switch statement above.
with (obj_fd_example_slider) event_user(0);
with (obj_fd_example_button_dissipation_type) event_user(0);
with (obj_fd_example_dropdown) event_user(0);
with (obj_fd_example_toggle_box) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draws things behind the fluid.
draw_background_stretched(background_index[1], 0, 0, world_width, world_height);

var visualization_shader_previous = fd_rectangle_get_visualization_shader(fd_rectangle);

// Allows the user to see debug data (velocity, velocity divergence, and pressure) by hitting various keys.
if (keyboard_check(ord("1"))) fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.DEBUG_VELOCITY);
if (keyboard_check(ord("2"))) fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.DEBUG_VELOCITY_DIVERGENCE);
if (keyboard_check(ord("3"))) fd_rectangle_set_visualization_shader(fd_rectangle, FD_VISUALIZATION_SHADER.DEBUG_PRESSURE);

// Draws the fluid.
fd_rectangle_draw_stretched(fd_rectangle, 0, 0, world_width, world_height, c_white, 1, material_interpolation_enabled);

// Draws all leaves when the current room is the dust/leaves room.
with (obj_fd_example_leaf) draw_self();

// Draws things above the fluid.
draw_background_stretched(background_index[2], 0, 0, world_width, world_height);

// Draws the collision mask if visible (for debug).
if (show_collision_mask) draw_surface_stretched(fd_rectangle_get_collision_mask_surface(fd_rectangle), 0, 0, world_width, world_height);

// Resets the visualization shader in case a debug visualization shader was used (the velocity, velocity divergence, or pressure visualization shader).
fd_rectangle_set_visualization_shader(fd_rectangle, visualization_shader_previous);

draw_set_font(ft_fd_example_big);

    // Draws the upper text in the GUI panel to the right.
    var s = "FPS (hold U to uncap): " + string(fps);
    if (paused) s += "#Simulation paused (press P to unpause)"; else s += "#Simulation is running (press P to pause)";
    s += "#Press M to change the input shape";
    if (keyboard_check(ord("1"))) s += "#Visualizing fluid velocity";
    else if (keyboard_check(ord("2"))) s += "#Visualizing fluid velocity divergence";
    else if (keyboard_check(ord("3"))) s += "#Visualizing fluid pressure";
    else s += "#Hold keys 1, 2, 3 to show underlying data##You can change the properties of the fluid with#the user interface below. SRJ means scheduled#relaxation Jacobi. MC means MacCormack, the MC#weights blend between a Semi-Lagrangian advection#scheme (0) and a MacCormack scheme (1).";
    draw_set_color($999999);
    draw_text(world_width + (room_width - world_width) * 0.5, 28, s);
    
    // Draws the lower text in the GUI panel to the right.
    switch (room) {
        case rm_example_pixel_art_fire: s = "Pixel art fire (click the arrows to change example):#Click to place fuel around the mouse. The fuel will combust and disappear up into the air. A shader pixelates it and chooses red, yellow or white dependent on the amount of fuel left. You can try changing the velocity MC weight to 0 for a more candle/match like fire."; break;
        case rm_example_candle_smoke: s = "Candle smoke (click the arrows to change example):#Hot smoke is emitted from the tip of the candle. As the smoke cools down it will stop rising and start falling, then disappear. Click and move the mouse to push the smoke around."; break;
        case rm_example_dye: s = "Dye mixing 1 (click the arrows to change example):#Click to mix dye of various colors. Moving the mouse will add and push dye. You can change the velocity MC weight to 0 for a smoother fluid, or to 1 for a higher detailed fluid. You can change the pressure solve method to affect the fluid motion accuracy and curl detail, the lower the number the faster the simulation."; break;
        case rm_example_dye_1: s = "Dye mixing 2 (click the arrows to change example):#Click to mix dye of various colors. Moving the mouse will add and push dye. This simulation is 1:1, every pixel is a fluid element being simulated. Right click to copy the color under the mouse."; break;
        case rm_example_smoke_trail: s = "Smoke trail (click the arrows to change example):#Click to add trailing smoke behind your mouse. This can be used for e.g. a smoke creature or as a trail for a fantasy sword. Press M to change to a larger input type. This can be used for e.g. a ghost."; break;
        case rm_example_dust_and_objects: s = "Dust/leaves (click the arrows to change example):#Add dust with the mouse. The dust will be affected by gravity and slowly descend. Right click to add leaves which which will be moved around by the wind you created. The fluids can collide with any type of shape. The collision masks can be set to sprites and surfaces. White dust can be used to imitate fog."; break;
        case rm_example_pixel_art_fiery_smoke: s = "Fiery smoke (click the arrows to change example):#Click to place fuel around the mouse. This effect (and the fireball effect) can also be visualized in the same way without pixelation. It's very easy to make your own shader and apply it to a fluid, so there's a countless amount of crazy and beautiful fluid visualizations that can be made with this asset."; break;
        case rm_example_thick_smoke: s = "Thick smoke (click the arrows to change example):#Click to add smoke around the mouse. This smoke uses a visualization shader to apply a threshold and lighting making the appearance of a thick smoke or gas."; break;
        case rm_example_gunfire: s = "Gunfire confetti (click the arrows to change example):#This is an effect achieved by setting a really high time step value. It can be postprocessed or tweaked to create a gunfire or confetti effect."; break;
    }
    draw_set_halign(fa_left);
        draw_text_ext(world_width + 24, 216, s, -1, room_width - world_width - 48);
    draw_set_halign(fa_center);
    
draw_set_font(ft_fd_example_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
