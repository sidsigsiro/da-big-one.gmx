<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fd_example_dropdown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sf = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var delta_time_factor = delta_time / (1000000 / 60);

mouseover_element = -1;

mouseover = position_meeting(mouse_x, mouse_y, id);

if (obj_fd_example_main.dropdown_mouseover == id) obj_fd_example_main.dropdown_mouseover = noone;
if (open_offset != 0) depth = -20; else depth = -10;

if (open) {
    open_offset = min(open_offset + 0.1 * delta_time_factor, 1);
    
    if (open_offset == 1 &amp;&amp; point_in_rectangle(mouse_x, mouse_y, x, y + sprite_height, x + sprite_width - 1, y + sprite_height * (elements + 1) - 1)) {
        obj_fd_example_main.dropdown_mouseover = id;
        
        mouseover_element = clamp(floor((mouse_y - (y + sprite_height)) / sprite_height), 0, array_length_1d(element_text) - 1);
        
        if (mouse_check_button_pressed(mb_left)) {
            selected_element = mouseover_element;
            
            switch (dropdown_id) {
                case 0:
                    switch (selected_element) {
                        case 0: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, -1); break;
                        case 1: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, -2); break;
                        case 2: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, -3); break;
                        case 3: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, -4); break;
                        case 4: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, 10); break;
                        case 5: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, 25); break;
                        case 6: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, 50); break;
                        case 7: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, 75); break;
                        case 8: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, 100); break;
                        case 9: fd_rectangle_set_pressure_iteration_type(obj_fd_example_main.fd_rectangle, 200); break;
                    }
                    break;
                    
                case 1:
                    switch (selected_element) {
                        case 0: fd_rectangle_set_pressure_size(obj_fd_example_main.fd_rectangle, 64, 64); break;
                        case 1: fd_rectangle_set_pressure_size(obj_fd_example_main.fd_rectangle, 128, 128); break;
                        case 2: fd_rectangle_set_pressure_size(obj_fd_example_main.fd_rectangle, 256, 256); break;
                        case 3: fd_rectangle_set_pressure_size(obj_fd_example_main.fd_rectangle, 512, 512); break;
                        case 4: fd_rectangle_set_pressure_size(obj_fd_example_main.fd_rectangle, 720, 720); break;
                    }
                    break;
                    
                case 2:
                    switch (selected_element) {
                        case 0: fd_rectangle_set_velocity_size(obj_fd_example_main.fd_rectangle, 64, 64); break;
                        case 1: fd_rectangle_set_velocity_size(obj_fd_example_main.fd_rectangle, 128, 128); break;
                        case 2: fd_rectangle_set_velocity_size(obj_fd_example_main.fd_rectangle, 256, 256); break;
                        case 3: fd_rectangle_set_velocity_size(obj_fd_example_main.fd_rectangle, 512, 512); break;
                        case 4: fd_rectangle_set_velocity_size(obj_fd_example_main.fd_rectangle, 720, 720); break;
                    }
                    break;
                    
                case 3:
                    switch (selected_element) {
                        case 0: fd_rectangle_set_material_size(obj_fd_example_main.fd_rectangle, 64, 64); break;
                        case 1: fd_rectangle_set_material_size(obj_fd_example_main.fd_rectangle, 128, 128); break;
                        case 2: fd_rectangle_set_material_size(obj_fd_example_main.fd_rectangle, 256, 256); break;
                        case 3: fd_rectangle_set_material_size(obj_fd_example_main.fd_rectangle, 512, 512); break;
                        case 4: fd_rectangle_set_material_size(obj_fd_example_main.fd_rectangle, 720, 720); break;
                    }
                    break;
                    
                case 4:
                    switch (selected_element) {
                        case 0: fd_rectangle_set_material_type(obj_fd_example_main.fd_rectangle, FD_MATERIAL_TYPE.A_8); break;
                        case 1: fd_rectangle_set_material_type(obj_fd_example_main.fd_rectangle, FD_MATERIAL_TYPE.RGBA_8); break;
                        case 2: fd_rectangle_set_material_type(obj_fd_example_main.fd_rectangle, FD_MATERIAL_TYPE.A_16); break;
                        case 3: fd_rectangle_set_material_type(obj_fd_example_main.fd_rectangle, FD_MATERIAL_TYPE.RGBA_16); break;
                    }
                    break;
                    
                case 5:
                    switch (selected_element) {
                        case 0: fd_rectangle_set_visualization_shader(obj_fd_example_main.fd_rectangle, FD_VISUALIZATION_SHADER.NO_SHADER); break;
                        case 1: fd_rectangle_set_visualization_shader(obj_fd_example_main.fd_rectangle, FD_VISUALIZATION_SHADER.PIXEL_ART_FIRE); break;
                        case 2: fd_rectangle_set_visualization_shader(obj_fd_example_main.fd_rectangle, FD_VISUALIZATION_SHADER.COLORIZE); break;
                        case 3: fd_rectangle_set_visualization_shader(obj_fd_example_main.fd_rectangle, FD_VISUALIZATION_SHADER.PIXEL_ART_FIERY_SMOKE); break;
                        case 4: fd_rectangle_set_visualization_shader(obj_fd_example_main.fd_rectangle, FD_VISUALIZATION_SHADER.THICK_SMOKE); break;
                    }
                    break;
            }
            
            open = false;
        }
    } else if (mouse_check_button_pressed(mb_left)) {
        open = false;
    }
} else {
    open_offset = max(open_offset - 0.1 * delta_time_factor, 0);
    
    if (!obj_fd_example_main.dropdown_mouseover &amp;&amp; mouseover &amp;&amp; mouse_check_button_pressed(mb_left)) {
        open = true;
    }
}

if (mouseover &amp;&amp; !obj_fd_example_main.dropdown_mouseover) image_blend = $AAAAAA; else image_blend = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>open = false;
open_offset = 0;
obj_fd_example_main.dropdown_mouseover = noone;

switch (dropdown_id) {
    case 0:
        switch (fd_rectangle_get_pressure_iteration_type(obj_fd_example_main.fd_rectangle)) {
            case -1: selected_element = 0; break;
            case -2: selected_element = 1; break;
            case -3: selected_element = 2; break;
            case -4: selected_element = 3; break;
            case 10: selected_element = 4; break;
            case 25: selected_element = 5; break;
            case 50: selected_element = 6; break;
            case 75: selected_element = 7; break;
            case 100: selected_element = 8; break;
            case 200: selected_element = 9; break;
        }
        
        description = "Pressure solve method:";
        element_text[0] = "16 SRJ iterations (16x16)";
        element_text[1] = "31 SRJ iterations (32x32)";
        element_text[2] = "64 SRJ iterations (64x64)";
        element_text[3] = "131 SRJ iterations (128x128)";
        element_text[4] = "10 Jacobi iterations";
        element_text[5] = "25 Jacobi iterations";
        element_text[6] = "50 Jacobi iterations";
        element_text[7] = "75 Jacobi iterations";
        element_text[8] = "100 Jacobi iterations";
        element_text[9] = "200 Jacobi iterations";
        
        break;
        
    case 1:
        switch (fd_rectangle_get_pressure_width(obj_fd_example_main.fd_rectangle)) {
            case 64: selected_element = 0; break;
            case 128: selected_element = 1; break;
            case 256: selected_element = 2; break;
            case 512: selected_element = 3; break;
            case 720: selected_element = 4; break;
        }
        
        description = "Pressure texture size:";
        element_text[0] = "64x64";
        element_text[1] = "128x128";
        element_text[2] = "256x256";
        element_text[3] = "512x512";
        element_text[4] = "720x720";
    
        break;
        
    case 2:
        switch (fd_rectangle_get_velocity_width(obj_fd_example_main.fd_rectangle)) {
            case 64: selected_element = 0; break;
            case 128: selected_element = 1; break;
            case 256: selected_element = 2; break;
            case 512: selected_element = 3; break;
            case 720: selected_element = 4; break;
        }
        
        description = "Velocity texture size:";
        element_text[0] = "64x64";
        element_text[1] = "128x128";
        element_text[2] = "256x256";
        element_text[3] = "512x512";
        element_text[4] = "720x720";
    
        break;
        
    case 3:
        switch (fd_rectangle_get_material_width(obj_fd_example_main.fd_rectangle)) {
            case 64: selected_element = 0; break;
            case 128: selected_element = 1; break;
            case 256: selected_element = 2; break;
            case 512: selected_element = 3; break;
            case 720: selected_element = 4; break;
        }
        
        description = "Material texture size:";
        element_text[0] = "64x64";
        element_text[1] = "128x128";
        element_text[2] = "256x256";
        element_text[3] = "512x512";
        element_text[4] = "720x720";
    
        break;
        
    case 4:
        switch (fd_rectangle_get_material_type(obj_fd_example_main.fd_rectangle)) {
            case FD_MATERIAL_TYPE.A_8: selected_element = 0; break;
            case FD_MATERIAL_TYPE.RGBA_8: selected_element = 1; break;
            case FD_MATERIAL_TYPE.A_16: selected_element = 2; break;
            case FD_MATERIAL_TYPE.RGBA_16: selected_element = 3; break;
        }
        
        description = "Material type:";
        element_text[0] = "A_8 (one 8 bit value)";
        element_text[1] = "RGBA_8 (four 8 bit values)";
        element_text[2] = "A_16 (one 16 bit value)";
        element_text[3] = "RGBA_16 (four 16 bit values)";
    
        break;

    case 5:
        switch (fd_rectangle_get_visualization_shader(obj_fd_example_main.fd_rectangle)) {
            case FD_VISUALIZATION_SHADER.NO_SHADER: selected_element = 0; break;
            case FD_VISUALIZATION_SHADER.PIXEL_ART_FIRE: selected_element = 1; break;
            case FD_VISUALIZATION_SHADER.COLORIZE: selected_element = 2; break;
            case FD_VISUALIZATION_SHADER.PIXEL_ART_FIERY_SMOKE: selected_element = 3; break;
            case FD_VISUALIZATION_SHADER.THICK_SMOKE: selected_element = 4; break;
        }
        
        description = "Visualization shader:";
        element_text[0] = "No shader";
        element_text[1] = "Pixel art fire";
        element_text[2] = "Colorize";
        element_text[3] = "Pixel art fiery smoke";
        element_text[4] = "Thick smoke";
        
        break;
}

elements = array_length_1d(element_text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(sf)) {
    sf = surface_create(sprite_width, sprite_height * elements);
    surface_set_target(sf);
        draw_clear(c_white);
        draw_set_color($C7C7C7);
        for (var i = 1; i &lt; elements; ++i) {
            draw_line(0, i * sprite_height, sprite_width, i * sprite_height);
        }
        draw_set_color($999999);
        for (i = 0; i &lt; elements; ++i) {
            draw_text(sprite_width * 0.5, i * sprite_height + 1, element_text[i]);
        }
    surface_reset_target();
}

draw_sprite_ext(sprite_index, 0, x, y, 1, 1, 0, image_blend, 1);

draw_set_color($868686);
draw_text(x + sprite_width * 0.5, y - 17, description);

var color = merge_color(c_black, $6B6B6B, color_get_red(image_blend) / 255);
draw_text_color(x + sprite_width * 0.5, y + 1, element_text[selected_element], color, color, color, color, 1);

draw_sprite_ext(sprite_index, 1, x, y, 1, 1, 0, image_blend, 1);

if (open_offset &gt; 0) {
    var t = (1 - (open_offset * open_offset * (3 - 2 * open_offset))) * surface_get_height(sf);
    draw_surface_part(sf, 0, t, sprite_width, surface_get_height(sf) - t, x, y + sprite_height);
    
    if (open_offset == 1 &amp;&amp; mouseover_element != -1) {
        draw_set_color(c_black);
        draw_set_alpha(0.1);
        t = y + (1 + mouseover_element) * sprite_height;
        draw_rectangle(x, t + (mouseover_element != 0), x + sprite_width - 1, t + sprite_height - 1, false);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
